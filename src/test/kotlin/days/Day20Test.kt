package days

import org.hamcrest.CoreMatchers.`is`
import org.hamcrest.MatcherAssert.assertThat
import org.junit.jupiter.api.Test
import util.multiLineInputLines

internal class Day20Test : Day(20) {
    val underTest = Day20()

    @Test
    fun `example 1`() {
        val n = underTest.runPartOne(
            """..#.#..#####.#.#.#.###.##.....###.##.#..###.####..#####..#....#..#..##..###..######.###...####..#..#####..##..#.#####...##.#.#..#.##..#.#......#.###.######.###.####...#.##.##..#..#..#####.....#.#....###..#.##......#.....#..#..#..##..#...##.######.####.####.#.#...#.......#..#.#.#...####.##.#......#..#...##.#.##..#...##.#.##..###.#......#.#.......#.#.#.####.###.##...#.....####.#..#..#.##.#....##..#.####....##...##..#...#......#.#.......#.......##..####..#...#.#.#...##..#.#..###..#####........#..####......#..#

#..#.
#....
##..#
..#..
..###""".multiLineInputLines()
        )
        assertThat(n, `is`(35))
    }

    @Test
    fun `it can do the first example enhance`() {
        val input = """...............
...............
...............
...............
...............
.....#..#......
.....#.........
.....##..#.....
.......#.......
.......###.....
...............
...............
...............
...............
...............""".multiLineInputLines()
        val expectedOutput = """...............
...............
...............
...............
.....##.##.....
....#..#.#.....
....##.#..#....
....####..#....
.....#..##.....
......##..#....
.......#.#.....
...............
...............
...............
...............""".multiLineInputLines()

        val inputMatrix = underTest.parseMatrix(input)
        val expectedOutputMatrix = underTest.parseMatrix(expectedOutput)
        val mapping = underTest.parseMapping(
            """..#.#..#####.#.#.#.###.##.....###.##.#..###.####..#####..#....#..#..##..###..######.###...####..#..#####..##..#.#####...##.#.#..#.##..#.#......#.###.######.###.####...#.##.##..#..#..#####.....#.#....###..#.##......#.....#..#..#..##..#...##.######.####.####.#.#...#.......#..#.#.#...####.##.#......#..#...##.#.##..#...##.#.##..###.#......#.#.......#.#.#.####.###.##...#.....####.#..#..#.##.#....##..#.####....##...##..#...#......#.#.......#.......##..####..#...#.#.#...##..#.#..###..#####........#..####......#..#"""
        )
        val actual = underTest.enhance(inputMatrix, mapping)
        assertThat(actual, `is`(expectedOutputMatrix))
    }

    @Test
    fun `it can do the second example enhance`() {
        val input = """...............
...............
...............
...............
.....##.##.....
....#..#.#.....
....##.#..#....
....####..#....
.....#..##.....
......##..#....
.......#.#.....
...............
...............
...............
...............""".multiLineInputLines()
        val expectedOutput = """...............
...............
...............
..........#....
....#..#.#.....
...#.#...###...
...#...##.#....
...#.....#.#...
....#.#####....
.....#.#####...
......##.##....
.......###.....
...............
...............
...............""".multiLineInputLines()

        val inputMatrix = underTest.parseMatrix(input)
        val expectedOutputMatrix = underTest.parseMatrix(expectedOutput)
        val mapping = underTest.parseMapping(

        )
        val actual = underTest.enhance(inputMatrix, mapping)
        assertThat(actual, `is`(expectedOutputMatrix))
    }


//    @Test
//    fun `example 1 light mode`() {
//        val n = underTest.runPartOne(

//
//.
//""".multiLineInputLines()
//        )
//        assertThat(n, `is`(35))
//    }

    @Test
    fun `it can do a light enhance`() {
        val input = """.#
#.""".multiLineInputLines()
        val mappingString =

        val mapping = underTest.parseMapping(
            mappingString
        )
        val expectedOutput = """####
#${mappingString["111101110".toInt(2)]}${mappingString["111011101".toInt(2)]}#
#${mappingString["101110111".toInt(2)]}${mappingString["011101111".toInt(2)]}#
####""".multiLineInputLines()
        // 111101110
        // 111011101
        // 101110111
        // 011101111

        val inputMatrix = underTest.parseMatrix(input)
        val expectedOutputMatrix = underTest.parseMatrix(expectedOutput)
        val actual = underTest.enhance(inputMatrix, mapping)
        assertThat(actual, `is`(expectedOutputMatrix))
    }
}
